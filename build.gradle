import org.gradle.api.internal.tasks.userinput.UserInputHandler
import org.gradle.tooling.BuildLauncher
import org.gradle.tooling.GradleConnector
import org.gradle.tooling.ProjectConnection
import org.springframework.boot.gradle.tasks.run.*

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "pl.allegro.tech.build.axion-release" version "1.12.0"
    id "org.springframework.boot" version "${versionSpringBoot}"
    id "io.spring.dependency-management" version "${versionSpringDependencyManagement}"
    id "java"
    id "io.freefair.lombok" version "${versionLombok}"
}

group "org.cvcoei"

// Configure Java targets for a minimum of Java 8
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

// Get the user input service
def userInputService = services.get(UserInputHandler.class) as UserInputHandler

// Configure release plugin
scmVersion {
    checks {
        aheadOfRemote = false
        uncommittedChanges = false
    }

    hooks {
        pre { context ->
            // Prompt to run documentation build
            def userPromptBuildDocs = userInputService.askQuestion("Build the documentation (Y/N)?", "N")
            if(userPromptBuildDocs.equalsIgnoreCase("Y")) {
                println "Building documentation with Docusaurus"
                project.exec {
                    workingDir project.file("docusaurus")
                    commandLine "npm"
                    args "run", "build"
                }

                project.delete("docs")
                project.file("docs").mkdirs()
                project.file("docs/.nojekyll").createNewFile()

                project.copy {
                    from "docusaurus/build"
                    into "docs"
                }

                project.exec {
                    commandLine "git"
                    args "add", "docs/*"
                }

                project.exec {
                    commandLine "git"
                    args "commit", "-m", "Generated new documentation"
                }
            }
        }

        post { context ->
            // Prompt to build boot JAR
            def userPromptBuildJar = userInputService.askQuestion("Build the Spring Boot executable (Y/N)?", "N")
            if(userPromptBuildJar.equalsIgnoreCase("Y")) {
                ProjectConnection connection = GradleConnector.newConnector()
                    .forProjectDirectory(project.projectDir)
                    .connect()

                try {
                    println "${context.currentVersion}"
                    logger.lifecycle("Building Spring Boot JAR")
                    BuildLauncher build = connection.newBuild()
                    build.forTasks("bootJar")
                    build.addArguments("-PforceBuildVersion=${context.currentVersion}")
                    build.run()
                }
                catch(Exception exception) {
                    logger.error("Building the Spring Boot JAR failed", exception)
                }
                finally {
                    connection.close()
                }
            }
        }
    }

    repository {
        customUsername = getProperty("github.token")
    }

    tag {
        prefix = ""
    }
}

// Apply semantic versioning (if a build version is not directly set)
version = hasProperty("forceBuildVersion") ? getProperty("forceBuildVersion") : scmVersion.version

// Keep version file up to date in resources directory
project.file("src/main/resources/version.properties").text = "version = ${version}"

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "io.projectreactor:reactor-bom:Dysprosium-SR9"
    }
}

dependencies {
    /*
     * Spring configuration
     */
    implementation("org.springframework.boot:spring-boot-starter:${versionSpringBoot}") {
        exclude module: "spring-boot-starter-logging"
    }
    implementation("org.springframework.boot:spring-boot-starter-jdbc:${versionSpringBoot}") {
        exclude module: "spring-boot-starter-logging"
    }
    implementation("org.springframework.boot:spring-boot-starter-log4j2:${versionSpringBoot}")
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    /*
     * Additional libraries
     */
    implementation "info.picocli:picocli:4.3.2"
    implementation "com.google.guava:guava:29.0-jre"
    implementation "com.opencsv:opencsv:5.2"
    implementation "com.squareup.okhttp3:okhttp:4.9.0"
    implementation "com.google.code.gson:gson:2.8.6"
    implementation "io.projectreactor:reactor-core"
    implementation "io.projectreactor.addons:reactor-extra"
    implementation "com.ibm.icu:icu4j:68.1"

    /*
     * RDMS drivers for SIS systems
     */
    implementation "com.oracle.ojdbc:ojdbc8:19.3.0.0"

    /*
     * Testing configuration
     */
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.+"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.+"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

/**
 * Configure how the Spring Boot JAR is built and published on GitHub
 */
libsDirName = "dist"

bootJar {
    archiveVersion = ""
    mainClassName = "org.cvcoei.sistools.Launcher"
}

/**
 * Spring boot run tasks for local debugging
 */
task setSpringProfile {
    group = "Spring Boot"
    description = "Set a persistent profile to use when running Spring Boot applications"

    doFirst {
        // Prompt the user for Spring profiles of choice
        def springProfile = userInputService.askQuestion("Please enter the Spring profile to use", null)
        file("build/spring-profile-active").text = springProfile
    }
}

task("checkVersion", type: BootRun) {
    group = "CVC"
    main = "org.cvcoei.sistools.Launcher"
    args "--version"
    classpath = sourceSets.main.runtimeClasspath
}

task("generateCsvLoginsBanner", type: BootRun) {
    group = "CVC"
    main = "org.cvcoei.sistools.Launcher"
    args "--generate-logins-csv"
    args "--profiles", "cvc-banner"
    args "--log-level", "debug"
    classpath = sourceSets.main.runtimeClasspath
}

task("generateCsvLoginsColleague", type: BootRun) {
    group = "CVC"
    main = "org.cvcoei.sistools.Launcher"
    args "--generate-logins-csv"
    args "--profiles", "cvc-colleague"
    args "--log-level", "debug"
    classpath = sourceSets.main.runtimeClasspath
}

/**
 * Apply build files with additional project tasks
 */
apply from: "gradle/docusaurus.gradle"
apply from: "gradle/oracle.gradle"
apply from: "gradle/banner.gradle"